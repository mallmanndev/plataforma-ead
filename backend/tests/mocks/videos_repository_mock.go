// Code generated by MockGen. DO NOT EDIT.
// Source: ./videos_repository.go

// Package mock_ports is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/matheusvmallmann/plataforma-ead/backend/modules/courses/domain/entities"
	ports "github.com/matheusvmallmann/plataforma-ead/backend/modules/courses/domain/ports"
)

// MockVideosRepository is a mock of VideosRepository interface.
type MockVideosRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideosRepositoryMockRecorder
}

// MockVideosRepositoryMockRecorder is the mock recorder for MockVideosRepository.
type MockVideosRepositoryMockRecorder struct {
	mock *MockVideosRepository
}

// NewMockVideosRepository creates a new mock instance.
func NewMockVideosRepository(ctrl *gomock.Controller) *MockVideosRepository {
	mock := &MockVideosRepository{ctrl: ctrl}
	mock.recorder = &MockVideosRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideosRepository) EXPECT() *MockVideosRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVideosRepository) Create(video *entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVideosRepositoryMockRecorder) Create(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVideosRepository)(nil).Create), video)
}

// Delete mocks base method.
func (m *MockVideosRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVideosRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVideosRepository)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockVideosRepository) Find(id string) (*entities.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*entities.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockVideosRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockVideosRepository)(nil).Find), id)
}

// Get mocks base method.
func (m *MockVideosRepository) Get(filters ports.GetFilters) ([]*entities.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filters)
	ret0, _ := ret[0].([]*entities.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVideosRepositoryMockRecorder) Get(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVideosRepository)(nil).Get), filters)
}

// Update mocks base method.
func (m *MockVideosRepository) Update(video *entities.Video) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", video)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVideosRepositoryMockRecorder) Update(video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVideosRepository)(nil).Update), video)
}
