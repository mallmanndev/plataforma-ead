// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service-course/protos/files.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileUploadServiceClient is the client API for FileUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadServiceClient interface {
	VideoUpload(ctx context.Context, opts ...grpc.CallOption) (FileUploadService_VideoUploadClient, error)
	GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
}

type fileUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadServiceClient(cc grpc.ClientConnInterface) FileUploadServiceClient {
	return &fileUploadServiceClient{cc}
}

func (c *fileUploadServiceClient) VideoUpload(ctx context.Context, opts ...grpc.CallOption) (FileUploadService_VideoUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileUploadService_ServiceDesc.Streams[0], "/FileUploadService/VideoUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadServiceVideoUploadClient{stream}
	return x, nil
}

type FileUploadService_VideoUploadClient interface {
	Send(*VideoUploadRequest) error
	CloseAndRecv() (*VideoUploadResponse, error)
	grpc.ClientStream
}

type fileUploadServiceVideoUploadClient struct {
	grpc.ClientStream
}

func (x *fileUploadServiceVideoUploadClient) Send(m *VideoUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadServiceVideoUploadClient) CloseAndRecv() (*VideoUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileUploadServiceClient) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	out := new(GetVideoResponse)
	err := c.cc.Invoke(ctx, "/FileUploadService/GetVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileUploadServiceServer is the server API for FileUploadService service.
// All implementations must embed UnimplementedFileUploadServiceServer
// for forward compatibility
type FileUploadServiceServer interface {
	VideoUpload(FileUploadService_VideoUploadServer) error
	GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error)
	mustEmbedUnimplementedFileUploadServiceServer()
}

// UnimplementedFileUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileUploadServiceServer struct {
}

func (UnimplementedFileUploadServiceServer) VideoUpload(FileUploadService_VideoUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method VideoUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedFileUploadServiceServer) mustEmbedUnimplementedFileUploadServiceServer() {}

// UnsafeFileUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServiceServer will
// result in compilation errors.
type UnsafeFileUploadServiceServer interface {
	mustEmbedUnimplementedFileUploadServiceServer()
}

func RegisterFileUploadServiceServer(s grpc.ServiceRegistrar, srv FileUploadServiceServer) {
	s.RegisterService(&FileUploadService_ServiceDesc, srv)
}

func _FileUploadService_VideoUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUploadServiceServer).VideoUpload(&fileUploadServiceVideoUploadServer{stream})
}

type FileUploadService_VideoUploadServer interface {
	SendAndClose(*VideoUploadResponse) error
	Recv() (*VideoUploadRequest, error)
	grpc.ServerStream
}

type fileUploadServiceVideoUploadServer struct {
	grpc.ServerStream
}

func (x *fileUploadServiceVideoUploadServer) SendAndClose(m *VideoUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadServiceVideoUploadServer) Recv() (*VideoUploadRequest, error) {
	m := new(VideoUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileUploadService_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServiceServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileUploadService/GetVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServiceServer).GetVideo(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileUploadService_ServiceDesc is the grpc.ServiceDesc for FileUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileUploadService",
	HandlerType: (*FileUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideo",
			Handler:    _FileUploadService_GetVideo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VideoUpload",
			Handler:       _FileUploadService_VideoUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service-course/protos/files.proto",
}
