// Code generated by MockGen. DO NOT EDIT.
// Source: course_repository.go

// Package mock_ports is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/matheusvmallmann/plataforma-ead/service-course/domain/entities"
)

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseRepository) Create(Course *entities.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", Course)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCourseRepositoryMockRecorder) Create(Course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseRepository)(nil).Create), Course)
}

// Delete mocks base method.
func (m *MockCourseRepository) Delete(Id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseRepositoryMockRecorder) Delete(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseRepository)(nil).Delete), Id)
}

// FindById mocks base method.
func (m *MockCourseRepository) FindById(Id string) (*entities.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", Id)
	ret0, _ := ret[0].(*entities.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCourseRepositoryMockRecorder) FindById(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCourseRepository)(nil).FindById), Id)
}

// Update mocks base method.
func (m *MockCourseRepository) Update(Course *entities.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", Course)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseRepositoryMockRecorder) Update(Course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseRepository)(nil).Update), Course)
}
